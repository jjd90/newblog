<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/newblog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/newblog/" rel="alternate" type="text/html" /><updated>2019-10-24T17:03:48-07:00</updated><id>http://localhost:4000/newblog/feed.xml</id><title type="html">JDs CIT 480 Blog</title><subtitle>A Blog about my experience taking CIT 480</subtitle><author><name>Juan Delgado</name></author><entry><title type="html">Creating an AWS EC2 Instance</title><link href="http://localhost:4000/newblog/blog/2019/10/24/Creating-an-EC2-Instance.html" rel="alternate" type="text/html" title="Creating an AWS EC2 Instance" /><published>2019-10-24T00:00:00-07:00</published><updated>2019-10-24T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/10/24/Creating-an-EC2-Instance</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/10/24/Creating-an-EC2-Instance.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;For this blog post I will be walking you through the process of creating an EC2 instance in Amazon Web Services using an ubuntu instance and we will set it up so that we can SSH into the instance through a Command Line Interface terminal. Let’s get started:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In AWS navigate to the Services &amp;gt; Compute &amp;gt; EC2 and under the “Create Instance” section select Launch Instance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Choose and Amazon Machine Image (AMI) search bar type in “Ubuntu” and select the first result named “Ubuntu Server 18.04 LTS (HVM), SSD Volume Type” then click Select.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next in the Choose an Instance Type windows leave the default option which should be “General Purpose  t2.micro” this option is apart of the free tier and we will not have to spend any money to use it. At the bottom right click on next.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Configure Instance Details window leave the defaults except for the “Network, Subnet, Auto-assign Public IP”. For the network option make sure to select the desired VPC or leave the default on. For the Subnet option make sure to select the subnet that is public otherwise we will not be able to connect to the instance. Lastly for the Auto-assign Public IP option select enable. Click on next to move to the next window.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Add Storage window go ahead and leave the default options and click next.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Add Tags windows we will create a new tag with the kay “Name” and in the “Value” section go ahead an create a name for the instance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Configure Security Group window leave the default option of “Create a new security group” for the Assign a security group option. At the bottom you will we a section with a firewall rule for SSH. Go ahead and leave it as is since we will be using SSH to remote in we need to have this rule. You can as well add additional rules if you would like. When done click on Review and Launch&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Review and Launch windows verify your option and settings then you can click on the Launch button.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the next window you will need to download the new keypair then name it and save it to your local computer. This key is very important as it will be used to remote into the instance later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the instance is launched you should navigate to the instances windows and select your new instance then click connect. A window will pop up with detailed instructions on how to connect to the new instance via SSH. I will not include those steps here since they are detailed, and AWS make it clear on what needs to be done.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulation you have created a new EC2 instance in AWS&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">What a Week</title><link href="http://localhost:4000/newblog/blog/2019/10/18/What-A-Week.html" rel="alternate" type="text/html" title="What a Week" /><published>2019-10-18T00:00:00-07:00</published><updated>2019-10-18T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/10/18/What-A-Week</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/10/18/What-A-Week.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;What a week this has been, due to a massive wildfire that affected Porter Ranch mountains and the surrounding cities. CSUN closed the campus down for the weekend which meant that our project presentation had to be pushed another week. While I should be cheering with joy, I was not that happy about it.&lt;/p&gt;

&lt;p&gt;Backtracking to where I left off in last weeks post. Our group had a major issue on our hands, none of us could access our EC2 instance. We were officially in panic mode, I was lucky enough to have my Thursday class cancelled and that mean having the time to work on the VPC. I knew that If I couldn’t get it fixed by the end of the day we would be screwed.&lt;/p&gt;

&lt;p&gt;I went to work and after trial and error I was able to find the issue that was causing our issue with the VPC and accessing the EC2 instance. First off, our VPC routing table was all jacked up. Well at least the public IP subnet routing portion. We were missing the routing table entry that forwards traffic to the outside or the world wide web. In AWS the entry is IP/subnet  0.0.0.0/0 once I added the route, I went back to test our EC2 instance but I was still having issues.&lt;/p&gt;

&lt;p&gt;The next step was to verify what subnet the EC2 instance was on. After looking into it I found that our EC2 instance was on a private subnet within our VPC. Being that the private subnets do not route to the outside it explained why we couldn’t SSH into our instance. Unfortunately, you can’t just switch the subnet of an EC2 instance so what I had to do was create an image from the existing instance then create a new EC2 instance. At last, I was successful in accessing the EC2 instance. It was a relief.&lt;/p&gt;

&lt;p&gt;My work wasn’t done though, next came the actual creation of the webserver and all the fun that comes with launching a HTTPS site using Apache2 and a custom Domain. For the most part it wasn’t as difficult as I thought it would be. My major issue was getting certificates created for our site. Luckily, one of our classmates shared the CertBot utility which saved my butt and finally got our website to show up via HTTPS.&lt;/p&gt;

&lt;p&gt;The real kicker is that about 10 minutes after I finished all this work on Friday (10/11/19). I got an email from CSUN that classes had been cancelled for the weekend. You had to be kidding me all that work and we wouldn’t get to present. I was upset but on the bright side, we get more time to prepare for our presentation.&lt;/p&gt;

&lt;p&gt;Hopefully it goes well, I’ll make sure to let you know how it went on next weeks post.&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Project 0 Continued</title><link href="http://localhost:4000/newblog/blog/2019/10/11/Project-0-continued.html" rel="alternate" type="text/html" title="Project 0 Continued" /><published>2019-10-11T00:00:00-07:00</published><updated>2019-10-11T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/10/11/Project-0-continued</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/10/11/Project-0-continued.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;This week marks the continuation of work on our Project 0. This post will be relatively small due to the continued work. For the most part we are in full swing and tasked are being worked on as well as documented through GitHub. I am about 80% done with the Ansible playbook. 
To my surprise the play book code is going to be relatively short as compared to the LAMP stack lab. This is due to less requirements, the professor confirmed this past Saturday that we only really needed apache and PHP installed on out server to host our website. 
For the most part my playbook is outlined as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install Apache2&lt;/li&gt;
  &lt;li&gt;Start Apache2&lt;/li&gt;
  &lt;li&gt;Install PHP&lt;/li&gt;
  &lt;li&gt;Copy over the new apache configuration file&lt;/li&gt;
  &lt;li&gt;Copy over the index html&lt;/li&gt;
  &lt;li&gt;Restart Apache2 
We have encountered issues with other portions of the project though. For some reason we cannot ssh into our EC2 instance anymore and the VPC process has had its hiccups as well. We are unsure if the issues are related to public/private key encryption or if its related to the VPC issues that we are having. I will have a brief update on next weeks post with the outcome. 
If we can manage to fix these issues by Friday October 11th we will be toast and I say that because my portion is dependent on connecting to the instance and running the playbook to get the website up and running.
We meet again on October 9th and once again had no luck getting the instance up. WE ARE OFFICIALLY IN PANIC MODE!!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Project 0</title><link href="http://localhost:4000/newblog/blog/2019/10/04/Project-0.html" rel="alternate" type="text/html" title="Project 0" /><published>2019-10-04T00:00:00-07:00</published><updated>2019-10-04T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/10/04/Project-0</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/10/04/Project-0.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;This week centers on our first official projects nickname Project 0. The project consists of creating a webserver using amazon web services as well as using github and slack to help the group members collaborate. The project seems easy right? well nope it is not. Being that no one in our group has ever used amazon web services it can be a little daunting to move forward. Luckily the professor provided some lab material for amazon web services to help us out.&lt;/p&gt;

&lt;p&gt;First things first our group needed a name, we settled on GitLegion. Git – taken from git hub and Legion – a multitude of people. Pretty clever if you ask me. With no lab for the week our group was ready to focus on the project and assigning task to each member. The project is broken down into task which once done will make up the webserver and webpage. The task consists of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Purchase a Domain (T)&lt;/li&gt;
  &lt;li&gt;Setup AWS Virtual Private Cloud (VPC)&lt;/li&gt;
  &lt;li&gt;Setup a Web Server on AWS Elastic Compute Cloud (EC2)&lt;/li&gt;
  &lt;li&gt;Setup your Domain&lt;/li&gt;
  &lt;li&gt;Generate TLS Certificates&lt;/li&gt;
  &lt;li&gt;Ansible Playbook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first task of purchasing a domain was completed during our class time. We were able to acquire GitLegion.dev as our official domain, not a bad address at $12 from google domains.&lt;/p&gt;

&lt;p&gt;The rest of the task have been divided up amongst our group. I was lucky enough to get assigned the ansible playbook. Which is cool because I was the first to complete the playbooks from the lab; so, this should be a piece of cake for me. I maybe speaking too soon though since I haven’t stared the coding yet.&lt;/p&gt;

&lt;p&gt;For the most part we are still in the early stages of the project and we expect to have it completed sometime next week. I will be posting again next week with a follow up on our progress. Thanks for reading!&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Prometheus</title><link href="http://localhost:4000/newblog/blog/2019/09/26/Prometheus-Node_Exporter.html" rel="alternate" type="text/html" title="Prometheus" /><published>2019-09-26T00:00:00-07:00</published><updated>2019-09-26T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/09/26/Prometheus-Node_Exporter</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/09/26/Prometheus-Node_Exporter.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;Welcome back for another weekly edition of CIT 480 Blog.&lt;/p&gt;

&lt;p&gt;I wanted to start off with a recap/update on last week’s Lab 2. After some troubleshooting and research, I was finally able to complete the Ansible playbooks that I was working on. I have to admit that it was a challenging lab to me, but I am grateful with the outcome and especially with the amount of knowledge I gained.&lt;/p&gt;

&lt;p&gt;Moving forward, this week’s lab involved working with Prometheus, another piece of software unknown to me. As always, I began with a little bit of research on Prometheus, so that I could understand what exactly I am working on. Prometheus is an open source system monitoring and alerting software tool. The lab involved creating a new docker container and installing Prometheus on it as well as node_explorer.&lt;/p&gt;

&lt;p&gt;The process went smooth for the most from beginning to end. Once the docker container is fired up I installed updates as well as wget and Prometheus. I ended up learning about the tar command which was a good thing. Once I verified that Prometheus was up and running through my browser, I took the required screenshot and I was done.&lt;/p&gt;

&lt;p&gt;The second process involved installing node_exporter and using Prometheus to bring up CPU metrics on the local container. Node_exporter is an add on to Prometheus that gives the ability to track node metrics like CPU usage and such.&lt;/p&gt;

&lt;p&gt;I ended up creating a new container for this section and installing Prometheus all over again. Then I installed node_exporter which was as well a smooth install. Once installed and started node_exporter goes to work. I brought up a browser window and connected to Prometheus then I brought up the cpu metric graph took a screenshot. That was it the lab had been completed and I done.&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Working with Ansible</title><link href="http://localhost:4000/newblog/blog/2019/09/20/Working-With-Ansible.html" rel="alternate" type="text/html" title="Working with Ansible" /><published>2019-09-20T00:00:00-07:00</published><updated>2019-09-20T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/09/20/Working-With-Ansible</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/09/20/Working-With-Ansible.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;Welcome back for another weekly edition of CIT 480 Blog.&lt;/p&gt;

&lt;p&gt;This week I was tasked with creating two Ansible playbook files. The first playbook was required to install traceroute, create two new groups, create users for each group, and lastly set permission for both groups. The second playbook was required to install a LAMP environment, the affinity, and composer. Being that I had never heard of Ansible I knew I was in for a good learning experience.&lt;/p&gt;

&lt;p&gt;Like with all projects I began with a simple google search. Next thing you know I have about fifteen tabs open on my web browser with no idea, in hell, on what to exactly do. After a few minutes of back and forth between webpage tutorials and youtube videos I started to understand what exactly an Ansible playbook is all about. It is a simple, yet complex, file written in YML that can be used to configure multiple systems with a simple command and a press of the enter key.&lt;/p&gt;

&lt;p&gt;Now that I was aware about what exactly an Ansible playbook the next question was, “What’s the structure and the syntax?”. Once again, I found myself overloading on the numerous amounts of tutorials and videos that were available online. Eventually stumbling on a webpage where I began to understand the process and structure. Ansible files are easy to structure once you start to understand how commands are written out (sample command below).&lt;/p&gt;

&lt;p&gt;At the top of the file you start by specifying the target hosts and then right underneath you start to list the task you want to complete. Ansible playbooks use what are called modules to specify the commands that the playbooks should run. You would normally run an apache install by typing out, “apt-get install apache2”. In Ansible the apt-get command, and any other command you can think of, has a corresponding module. For apt-get that module is apt.&lt;/p&gt;

&lt;p&gt;For most modules the module (command) type is superseded by a name field which is more of a comment that explains what that portion of the task with do as seen above I gave the task a name of “Install Apache2”. Second you specify the module (command) that you want to call in my case the “apt” module is the ansible equivalent of “apt-get”. Below that the name of the software package to be installed should be specified, in my example I specified “apache2”. Then the state is set to latest for the latest version.&lt;/p&gt;

&lt;p&gt;For the apt module you have to specify that you want to run a apt-get so you set the force_apt_get to yes. Lastly, I set the cache to be updated. Below is the sample:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hosts: localhost&lt;/li&gt;
  &lt;li&gt;remote_user: root&lt;/li&gt;
  &lt;li&gt;tasks:
  	- name: install apache2
    &lt;ul&gt;
      &lt;li&gt;apt:
        &lt;ul&gt;
          &lt;li&gt;name: apache2&lt;/li&gt;
          &lt;li&gt;state: latest&lt;/li&gt;
          &lt;li&gt;force_apt_get: yes&lt;/li&gt;
          &lt;li&gt;update_cache: yes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately, having to work on an Ansible playbook was not a daunting as I originally thought it would be. Yes, there is a new syntax that need to be learned but that’s nothing when you think about the knowledge that is gained in the process.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;P.S. Since submitting this blog I have yet to finish the playbooks. I will give an update on next weeks blog. Stay tuned!&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">CIT 480 The Beginning</title><link href="http://localhost:4000/newblog/blog/2019/09/06/First-Blog-Post.html" rel="alternate" type="text/html" title="CIT 480 The Beginning" /><published>2019-09-06T00:00:00-07:00</published><updated>2019-09-06T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/09/06/First-Blog-Post</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/09/06/First-Blog-Post.html">&lt;p&gt;Welcome to my first blog post!&lt;/p&gt;

&lt;p&gt;My name is Juan, but I prefer to go by Johnny. I’m currently a senior majoring in Computer Information Technology and minoring in Anthropology. Yes!, it’s a weird combination CIT and Anthropology but I have to admit that while taking an archeology I grew to like it a lot. Anyways, back to the important topic this CIT 480 blog. The goal is to update my page with a weekly blog post from now until the end of the semester. Wish me Luck!&lt;/p&gt;

&lt;p&gt;To kick off my first blog post, I will be writing about my experience with trying to complete the first lab and creating my first ever github blog page. Initially the lab seemed like it would be a piece of cake that was until page 9 when a dreaded error message began. After creating and logging into a docker container named cit160; and using the guest account to run the “class_setup” command the process would instantly fail.&lt;/p&gt;

&lt;p&gt;Since I couldn’t successfully get the command to run correctly. I moved on to the next step in which I connected over SSH to the CSUN server.  Knowing that I wouldn’t be able to complete the epilogue steps within the cit160 container I had created. I opted to run the same commands on the CSUN SSH server which worked like a charm. I ended up copying the lab report file from the CSUN SSH server over to my desktop and that was that for the lab. Mission Accomplished!&lt;/p&gt;

&lt;p&gt;The Blog portion was much more fun to complete than the Lab. Once you do the research and learn the basics of how git hub commands work it is a smooth process. You install Jekyll on your machine, create the folder and files that will hold all the necessary information for your blog page, then push all those files and folders to a github repository.&lt;/p&gt;

&lt;p&gt;Lastly. You create a secondary branch called “gh-pages” which github recognizes. Github instantly host the contents of the “gh-pages” as a website via a personalized link. Mine happens to be:&lt;/p&gt;

&lt;p&gt;https://jjd90.github.io/blog/&lt;/p&gt;

&lt;p&gt;In conclusion, I have to admit that learning github and Jekyll was a much more fun process for me while using docker and trying to get the lab completed ended up being much more complex than I figured it would be. As I write this, I have yet to get the class_setup to run successfully on my docker cit160 container.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;[UPDATE]
 I was eventually able to figure it out with the help of the professor. It turned out that I had a bad container and all I needed to do was blow it up and recreate it (mind blown). Then again, the professor had mentioned that containers are designed to be easy create or delete when needed.&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Welcome to my first blog post!</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/newblog/jekyll/update/2019/09/01/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-09-01T00:00:00-07:00</published><updated>2019-09-01T00:00:00-07:00</updated><id>http://localhost:4000/newblog/jekyll/update/2019/09/01/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/newblog/jekyll/update/2019/09/01/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>