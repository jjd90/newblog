<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/newblog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/newblog/" rel="alternate" type="text/html" /><updated>2019-11-22T17:40:55-08:00</updated><id>http://localhost:4000/newblog/feed.xml</id><title type="html">JDs CIT 480 Blog</title><subtitle>A Blog about my experience taking CIT 480</subtitle><author><name>Juan Delgado</name></author><entry><title type="html">Installing a LAMP Stack on Ubunu</title><link href="http://localhost:4000/newblog/blog/2019/11/22/Installing-LAMP-Stack-Ubunt.html" rel="alternate" type="text/html" title="Installing a LAMP Stack on Ubunu" /><published>2019-11-22T00:00:00-08:00</published><updated>2019-11-22T00:00:00-08:00</updated><id>http://localhost:4000/newblog/blog/2019/11/22/Installing-LAMP-Stack-Ubunt</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/11/22/Installing-LAMP-Stack-Ubunt.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;For this blog post I will be walking you through the process of installing a LAMP stack on Ubuntu.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;To begin you will need to make sure that you are running Ubuntu 18.04 or higher installed. As well make sure that the system is up to date by running the following command:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$sudo apt-get update&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We will now being the installation of the necessary software; Starting with Apache. Run the first command to install Apache and then the second command to verify that it was installed correctly and running.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$sudo apt-get install apache2&lt;/li&gt;
      &lt;li&gt;$sudo service apache2 status&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, verify that the firewall has a profile for apache by running the first command and then make sure that you allow traffic to ports 80 and 443 by running the second command.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$sudo ufw app list&lt;/li&gt;
      &lt;li&gt;$sudo ufw app info “Apache Full”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now we need to verify that apache is running correctly by going to a web browser and typing in the IP of the machine that has Ubuntu installed. If you are using a VM then you will need to most likely use the local host IP address with the port that you specified when you created the VM. IF you are using a server than you should be able to just use the servers IP address. You will see the page with the following heading:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   “Apache2 Ubuntu Default Page”
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next is the installation of MySQL which is used as a database. Run the following command to install MySQL and make sure to change the root password when prompted.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$sudo apt-get install mysql-server&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After installing MySQL the next step is to install PHP using the following command:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$sudo apt-get install php libapache2-mod-php php-mysql&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the next few steps we will verify that PHP was installed correctly. To do so we will first need to make a configuration change to Apache so that it serves up files with a PHP extension first rather than files with HTML extensions and we will also install some dependencies. Run the following command to open up the configuration file for editing:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$sudo vim /etc/apache2/mods-enabled/dir.conf&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;a. Within the file contents locate the section &lt;IfModule mode_dir.c=&quot;&quot;&gt; and type index.php in front of the index.html it should look like this
       &lt;IfModule mode_dir.c=&quot;&quot;&gt;
     DirectoryIndex index.php index.html index.cgi index.pl index.xhtml ind$
       &lt;/IfModule&gt;&lt;/IfModule&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Save the changes and exit out.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;b. Aside from installing PHP we will also need to install some PHP modules by running the following command:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$ sudo apt-get install php-cli&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lastly, we will create a new file called index.php in the web root directory to test PHP. Run the following command to create the file:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$sudo nano /var/www/html/info.php&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;a. Type the following into the file:
     &lt;?php 
       phpinfo ();
     ?&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Save the changes and exit out.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, it’s time to test the file we just created. Open a web browser and type in the following into your address bar:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   “IP address”/info.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you see a PHP information screen, then congratulations you have successfully installed a LAMP stack on an Ubuntu system. If you have issues, please contact me and I will be happy to help you out.&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Installing Terraform on MacOS</title><link href="http://localhost:4000/newblog/blog/2019/11/14/Installing-Terraform.html" rel="alternate" type="text/html" title="Installing Terraform on MacOS" /><published>2019-11-14T00:00:00-08:00</published><updated>2019-11-14T00:00:00-08:00</updated><id>http://localhost:4000/newblog/blog/2019/11/14/Installing-Terraform</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/11/14/Installing-Terraform.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;For this blog post I will be walking you through the process of installing Terraform on a MacOS system.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;To get started, navigate to the terraform downloads webpage and make sure to copy the link address for the MacOS download. The link is also below.&lt;/p&gt;

    &lt;p&gt;https://releases.hashicorp.com/terraform/0.12.13/terraform_0.12.13_darwin_amd64.zip&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, open up a terminal window and navigate to the directory in which you would like to download the Terraform package. For my download I choose the home directory. Then run the following command to download the package (all one line):&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$wget https://releases.hashicorp.com/terraform/0.12.13/terraform_0.12.13_darwin_amd64.zip&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the download is complete the file will need to be unzipped and then moved into its on directory. Run the following command to unzip the file:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$unzip terraform_0.12.13_darwin_amd64.zip&lt;/li&gt;
      &lt;li&gt;$mkdir Terraform&lt;/li&gt;
      &lt;li&gt;$mv terraform Terraform/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, the path will need to be updated so that the Terraform binary can be called from anywhere on the system (e.g desktop, documents, home directories). On the home directory run the following commands to edit the .profile file:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$cd ~&lt;/li&gt;
      &lt;li&gt;$ls -al  (this command will display the contents of the home directory)&lt;/li&gt;
      &lt;li&gt;$vim ~/.profile	(you can use which ever text editor you would like)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Type in the following into your .profile file:&lt;/p&gt;

    &lt;p&gt;export PATH=”$PATH:~/Terraform”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, you will need to update the path so that Terraform can be called from anywhere. To do so run the following command:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$source ~/.profile&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lastly to make sure that Terraform was installed correctly run the command below. It should return the Terraform version information:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$terraform –version&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Installing Snipe-It on Ubuntu</title><link href="http://localhost:4000/newblog/blog/2019/11/08/Snipe-It-Install.html" rel="alternate" type="text/html" title="Installing Snipe-It on Ubuntu" /><published>2019-11-08T00:00:00-08:00</published><updated>2019-11-08T00:00:00-08:00</updated><id>http://localhost:4000/newblog/blog/2019/11/08/Snipe-It-Install</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/11/08/Snipe-It-Install.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;For this post I will be walking you through the process of Installing Snipe-It Asset Manager on an AWS EC2 Ubuntu Instance.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In AWS create an EC2 Ubuntu instance. This is a rather simple process but if you have never created an EC2 instance please follow the link to a previous post where I walk you through the process:&lt;/p&gt;

    &lt;p&gt;https://jjd90.github.io/newblog/blog/2019/10/24/Creating-an-EC2-Instance.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Connect to the EC2 Instance via SSH or your preferred method. If you are using SSH over a terminal you command will looks something like this:&lt;/p&gt;

    &lt;p&gt;ssh -i “newInstanceKey.pem” ubuntu@ec2-13-233-13-164.us-west-2.compute.amazonaws.com&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once you are connected to the EC2 instance go ahead and update the system then install Git (will be used to install Snipe_It) by running the following commands&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo apt-get update&lt;/li&gt;
      &lt;li&gt;sudo apt-get -y upgrade&lt;/li&gt;
      &lt;li&gt;sudo apt-get -y install git&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, Install Apache2 webserver, start it, and enable it by running the following commands:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo apt-get -y install apache2&lt;/li&gt;
      &lt;li&gt;sudo systemctl start apache2&lt;/li&gt;
      &lt;li&gt;sudo systemctl enable apache2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, Install PHP and its dependencies by running the following command:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo apt-get -y install php php-pdo php-mbstring php-tokenizer php-curl php-mysql php-ldap php-zip php-fileinfo php-gd php-dom php-mcrypt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, Is the installation of MariaDB which we will use to create our Snipe-It database. The following commands will install Maria DB, start MariaDB, and enable MariaDB:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo apt-get -y install mariadb-server&lt;/li&gt;
      &lt;li&gt;sudo systemctl start mysql&lt;/li&gt;
      &lt;li&gt;sudo systemctl enable mysql&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, you will need to secure the MariaDB installation by running the command below, It will ask you to create a new root password, as well as give you the options to remove test database and remove any anonymous users.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo mysql_secure_installation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After securing Maria DB, log in to MariaDB using the new password you created in the step above and create a new database and user for Snipe-It. Run the following commands:&lt;/p&gt;

    &lt;p&gt;Log In command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   - mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Database and User creation commands:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   - CREATE DATABASE &amp;lt;snipeit DB Name&amp;gt;;
   - CREATE USER '&amp;lt; snipeituser name &amp;gt;'@'localhost' IDENTIFIED BY '&amp;lt; Password&amp;gt;';
   - GRANT ALL PRIVILEGES ON &amp;lt;snipeit DB Name&amp;gt;;.* TO '&amp;lt; snipeituser name &amp;gt;'@'localhost';
   - FLUSH PRIVILEGES;
   - EXIT;

        Note: Make sure to replace &amp;lt;snipeit DB Name&amp;gt; with 
        whatever you want to call the database, as well as 
        &amp;lt; snipeituser name &amp;gt; and &amp;lt; Password&amp;gt; with whichever 
        username and password you want.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last piece of software to be installed, before Snipe-It, is Composer. Install it via the following commands:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;cd ~&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;curl -sS https://getcomposer.org/installer&lt;/td&gt;
              &lt;td&gt;php&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;sudo mv composer.phar /usr/local/bin/composer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now it’s time to install Snipe-It using Git (installed in the first step). Run the following commands:&lt;/p&gt;

    &lt;p&gt;10a. First change into the webservers root directory via the command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - cd /var/www/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;10b. Second, Clone the Snipe-It repository for Github:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - sudo git clone https://github.com/snipe/snipe-it snipe-it
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, is the creation of the .env file for Snipe-It. The .env file is basically a configuration file that we will customize to reflect the server and database settings so that Snipe-It can run correctly. Run the following commands to change into the Snipe-It directory then create a new .env file:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;cd /var/www/snipe-it&lt;/li&gt;
      &lt;li&gt;sudo cp .env.example .env&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, Open the .env file and edit some of the contents. I use VIM text editor but feel free to use any editor of your choice.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo vim .env&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Edit the following lines:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  APP_URL=null      	(Provide your domain or IP here, I used 
                         my EC2 public IP)
  APP_TIMEZONE='UTC' 	(Change it according to your country)

  DB_DATABASE=null   	(Provide the database name you created 
                         earlier)
  DB_USERNAME=null	Provide database user's username you 
                         created earlier)
  DB_PASSWORD=null   	(Provide the DB user's password you 
                         created earlier)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Save your changes then exit the editor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, the folder permissions and ownership for Snipe-It will need to be specified. The permissions will be set for the storage and public/uploads directories within the /var/www/snipe-it directory:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo chown -R www-data:www-data storage public/uploads&lt;/li&gt;
      &lt;li&gt;sudo chmod -R 755 storage&lt;/li&gt;
      &lt;li&gt;sudo chmod -R 755 public/uploads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, The installation of PHP dependencies using Composer is required. Run the following command from within the /var/www/snipe-it directory:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo composer install –no-dev –prefer-source&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, is the process of generation and APP_KEY for Snipe-It to use. The following command will generate a new key and automatically paste it into the .env file:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;sudo php artisan key:generate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Snipe-It to work and be served up as a webpage, it is required to create a new virtual host file for apache. The following steps will make that happen:&lt;/p&gt;

    &lt;p&gt;16a. Run the following command to create a new virtual file:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - sudo vim /etc/apache2/sites-available/snipeit-hostfile.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;16b. Add the code below to the virtual file:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;VirtualHost *:80&amp;gt;
  	     ServerName snipeit.example.com
   	     DocumentRoot /var/www/snipe-it/public
  	     &amp;lt;Directory /var/www/snipe-it/public&amp;gt;
		Options Indexes FollowSymLinks MultiViews
		AllowOverride All
		Order allow,deny
   		allow from all
     &amp;lt;/Directory&amp;gt;
  &amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;16c. Save and close the file then run the following commands to activate the host file and restart apache:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - sudo a2ensite snipeit-hostfile.conf
  - sudo a2enmod rewrite
  - sudo systemctl restart apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally, we reach the end of the instllation. The next step is to connect to the IP/Domain that you set for your snipe-it installation. Upon doing that you will get to a preflight window which will allow you to finish the configuration through a web browser. You can either type in the IP address or the domain as shown below:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  http://snipeit.example.com or http://127.0.0.1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Congratulations you have now successfully installed snipe it on an EC2 instance!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Install Ansible on Ubuntu and Run Playbook Againts AWS Instance</title><link href="http://localhost:4000/newblog/blog/2019/11/01/Ansible-Playbook-AWS.html" rel="alternate" type="text/html" title="Install Ansible on Ubuntu and Run Playbook Againts AWS Instance" /><published>2019-11-01T00:00:00-07:00</published><updated>2019-11-01T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/11/01/Ansible-Playbook-AWS</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/11/01/Ansible-Playbook-AWS.html">&lt;p&gt;Hi Everyone,
For this blog post I will be walking you though the process of installing Ansible on ubuntu and then running the Ansible playbook against an Amazon Web Services EC2 instance.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In an Ubuntu terminal type in the following commands to install ansible:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;$ sudo apt update&lt;/li&gt;
      &lt;li&gt;$ sudo apt install software-properties-common&lt;/li&gt;
      &lt;li&gt;$ sudo apt-add-repository –yes –update ppa:ansible/ansible&lt;/li&gt;
      &lt;li&gt;$ sudo apt install ansible&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;1a. To make sure that ansible was installed correctly run the following command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   - $ ansible --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next will be the installation of the AWS CLI application which will give us the ability to run the playbooks without having to log in or specifying credentials in our Ansible file (more secure).&lt;/p&gt;

    &lt;p&gt;2a. We will be using pip to install aws cli so make sure it is installed by running the following command:
       - $ pip –version&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   If pip is not installed run the following commands: 
	
   Pip2
        - $ sudo apt install python-pip
   Pip3
        - $ sudo apt install python3-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;2b. Run the following command to run the AWS CLI install:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   Pip2
        - $ pip2 install awscli --upgrade –user
   Pip3
        - $ pip3 install awscli --upgrade –user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;2c. To make sure that AWS CLI was installed run the following command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   - $ aws –version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we will need to generate access keys for the IAM user which you will be using to connect to the EC2 instance. You can generate those keys by going to the IAM section in AWS then going into users and selecting the desired user and lastly going into the “Security Credentials” section and clicking “Create Access Keys”. Make note of the ID and Secret.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now back at the terminal run the following command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- $ aws configure

      You will be asked for the following information:
      AWS Access Key ID: &amp;lt;enter key&amp;gt;
      AWS Secret Access Key: &amp;lt;enter key&amp;gt;
      Default region name: &amp;lt;can be any region I used us-west-2&amp;gt;
      Default output format: json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We will now go back to ansible and configure the host (Inventory) file with the information of the instance that we will want to run the Ansible playbook against.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Note: create an AWS EC2 instance running Ubuntu manually. There
       are methods to automate the provisioning of EC2 instances
       but for simplicity create it manually. Also make sure to
       save the keypair file which we will also need and that
       in the security group you open ports 22, 80, and 443 as
       we will be installing apache2 using ansible.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;5a. Navigate to the following directory “/etc/ansible/” If the directory does not exist create it. Inside of that 
       directory there should be a host file if not create the host file using you favorite cli editor (I use vim) 
       and then type in the following:&lt;/p&gt;

    &lt;p&gt;-[aws]
   -&lt;Public IP=&quot;&quot; of=&quot;&quot; EC2=&quot;&quot;&gt; ansible_user=ubuntu ansible_ssh_private_key_file=&amp;lt;location .pem file&amp;gt;&lt;/Public&gt;&lt;/p&gt;

    &lt;p&gt;-Example:
   -0.0.0.0 ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/keypair.pem&lt;/p&gt;

    &lt;p&gt;5b. To verify that the inventory is pulled correctly run the following command:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   - ansible all --list-hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now that the inventory file is ready, create a simple Ansible playbook and make sure to specify the host and aws. My playbook looks like this (playbook.yml):&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-       ---
-       - hosts: aws
-	 tasks:
-	     - name: install apache2
-	       become: true
-	       apt:
-                  name: apache2
-                  state: latest
-                  force_apt_get: yes
-	
-             - name: start apache2 service
-	       service:
-	             name: apache2
-	             state: started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now is the moment of truth, type in the following command within the directory that you have your ansible playbook in:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   - ansible-playbook playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If all went well, you should see the ansible output and then completion message. Congratulations you have successfully ran an Ansible playbook against an AWS EC2 instance. If you run into any issues, please contact me or run a google search on your error message. Google works wonders!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone, For this blog post I will be walking you though the process of installing Ansible on ubuntu and then running the Ansible playbook against an Amazon Web Services EC2 instance.</summary></entry><entry><title type="html">Creating an AWS EC2 Instance</title><link href="http://localhost:4000/newblog/blog/2019/10/24/Creating-an-EC2-Instance.html" rel="alternate" type="text/html" title="Creating an AWS EC2 Instance" /><published>2019-10-24T00:00:00-07:00</published><updated>2019-10-24T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/10/24/Creating-an-EC2-Instance</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/10/24/Creating-an-EC2-Instance.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;For this blog post I will be walking you through the process of creating an EC2 instance in Amazon Web Services using an ubuntu instance and we will set it up so that we can SSH into the instance through a Command Line Interface terminal. Let’s get started:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;In AWS navigate to the Services &amp;gt; Compute &amp;gt; EC2 and under the “Create Instance” section select Launch Instance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Choose and Amazon Machine Image (AMI) search bar type in “Ubuntu” and select the first result named “Ubuntu Server 18.04 LTS (HVM), SSD Volume Type” then click Select.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next in the Choose an Instance Type windows leave the default option which should be “General Purpose  t2.micro” this option is apart of the free tier and we will not have to spend any money to use it. At the bottom right click on next.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Configure Instance Details window leave the defaults except for the “Network, Subnet, Auto-assign Public IP”. For the network option make sure to select the desired VPC or leave the default on. For the Subnet option make sure to select the subnet that is public otherwise we will not be able to connect to the instance. Lastly for the Auto-assign Public IP option select enable. Click on next to move to the next window.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Add Storage window go ahead and leave the default options and click next.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Add Tags windows we will create a new tag with the kay “Name” and in the “Value” section go ahead an create a name for the instance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Configure Security Group window leave the default option of “Create a new security group” for the Assign a security group option. At the bottom you will we a section with a firewall rule for SSH. Go ahead and leave it as is since we will be using SSH to remote in we need to have this rule. You can as well add additional rules if you would like. When done click on Review and Launch&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the Review and Launch windows verify your option and settings then you can click on the Launch button.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the next window you will need to download the new keypair then name it and save it to your local computer. This key is very important as it will be used to remote into the instance later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Once the instance is launched you should navigate to the instances windows and select your new instance then click connect. A window will pop up with detailed instructions on how to connect to the new instance via SSH. I will not include those steps here since they are detailed, and AWS make it clear on what needs to be done.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulation you have created a new EC2 instance in AWS&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">What a Week</title><link href="http://localhost:4000/newblog/blog/2019/10/18/What-A-Week.html" rel="alternate" type="text/html" title="What a Week" /><published>2019-10-18T00:00:00-07:00</published><updated>2019-10-18T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/10/18/What-A-Week</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/10/18/What-A-Week.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;What a week this has been, due to a massive wildfire that affected Porter Ranch mountains and the surrounding cities. CSUN closed the campus down for the weekend which meant that our project presentation had to be pushed another week. While I should be cheering with joy, I was not that happy about it.&lt;/p&gt;

&lt;p&gt;Backtracking to where I left off in last weeks post. Our group had a major issue on our hands, none of us could access our EC2 instance. We were officially in panic mode, I was lucky enough to have my Thursday class cancelled and that mean having the time to work on the VPC. I knew that If I couldn’t get it fixed by the end of the day we would be screwed.&lt;/p&gt;

&lt;p&gt;I went to work and after trial and error I was able to find the issue that was causing our issue with the VPC and accessing the EC2 instance. First off, our VPC routing table was all jacked up. Well at least the public IP subnet routing portion. We were missing the routing table entry that forwards traffic to the outside or the world wide web. In AWS the entry is IP/subnet  0.0.0.0/0 once I added the route, I went back to test our EC2 instance but I was still having issues.&lt;/p&gt;

&lt;p&gt;The next step was to verify what subnet the EC2 instance was on. After looking into it I found that our EC2 instance was on a private subnet within our VPC. Being that the private subnets do not route to the outside it explained why we couldn’t SSH into our instance. Unfortunately, you can’t just switch the subnet of an EC2 instance so what I had to do was create an image from the existing instance then create a new EC2 instance. At last, I was successful in accessing the EC2 instance. It was a relief.&lt;/p&gt;

&lt;p&gt;My work wasn’t done though, next came the actual creation of the webserver and all the fun that comes with launching a HTTPS site using Apache2 and a custom Domain. For the most part it wasn’t as difficult as I thought it would be. My major issue was getting certificates created for our site. Luckily, one of our classmates shared the CertBot utility which saved my butt and finally got our website to show up via HTTPS.&lt;/p&gt;

&lt;p&gt;The real kicker is that about 10 minutes after I finished all this work on Friday (10/11/19). I got an email from CSUN that classes had been cancelled for the weekend. You had to be kidding me all that work and we wouldn’t get to present. I was upset but on the bright side, we get more time to prepare for our presentation.&lt;/p&gt;

&lt;p&gt;Hopefully it goes well, I’ll make sure to let you know how it went on next weeks post.&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Project 0 Continued</title><link href="http://localhost:4000/newblog/blog/2019/10/11/Project-0-continued.html" rel="alternate" type="text/html" title="Project 0 Continued" /><published>2019-10-11T00:00:00-07:00</published><updated>2019-10-11T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/10/11/Project-0-continued</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/10/11/Project-0-continued.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;This week marks the continuation of work on our Project 0. This post will be relatively small due to the continued work. For the most part we are in full swing and tasked are being worked on as well as documented through GitHub. I am about 80% done with the Ansible playbook. 
To my surprise the play book code is going to be relatively short as compared to the LAMP stack lab. This is due to less requirements, the professor confirmed this past Saturday that we only really needed apache and PHP installed on out server to host our website. 
For the most part my playbook is outlined as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Install Apache2&lt;/li&gt;
  &lt;li&gt;Start Apache2&lt;/li&gt;
  &lt;li&gt;Install PHP&lt;/li&gt;
  &lt;li&gt;Copy over the new apache configuration file&lt;/li&gt;
  &lt;li&gt;Copy over the index html&lt;/li&gt;
  &lt;li&gt;Restart Apache2 
We have encountered issues with other portions of the project though. For some reason we cannot ssh into our EC2 instance anymore and the VPC process has had its hiccups as well. We are unsure if the issues are related to public/private key encryption or if its related to the VPC issues that we are having. I will have a brief update on next weeks post with the outcome. 
If we can manage to fix these issues by Friday October 11th we will be toast and I say that because my portion is dependent on connecting to the instance and running the playbook to get the website up and running.
We meet again on October 9th and once again had no luck getting the instance up. WE ARE OFFICIALLY IN PANIC MODE!!&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Project 0</title><link href="http://localhost:4000/newblog/blog/2019/10/04/Project-0.html" rel="alternate" type="text/html" title="Project 0" /><published>2019-10-04T00:00:00-07:00</published><updated>2019-10-04T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/10/04/Project-0</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/10/04/Project-0.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;This week centers on our first official projects nickname Project 0. The project consists of creating a webserver using amazon web services as well as using github and slack to help the group members collaborate. The project seems easy right? well nope it is not. Being that no one in our group has ever used amazon web services it can be a little daunting to move forward. Luckily the professor provided some lab material for amazon web services to help us out.&lt;/p&gt;

&lt;p&gt;First things first our group needed a name, we settled on GitLegion. Git – taken from git hub and Legion – a multitude of people. Pretty clever if you ask me. With no lab for the week our group was ready to focus on the project and assigning task to each member. The project is broken down into task which once done will make up the webserver and webpage. The task consists of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Purchase a Domain (T)&lt;/li&gt;
  &lt;li&gt;Setup AWS Virtual Private Cloud (VPC)&lt;/li&gt;
  &lt;li&gt;Setup a Web Server on AWS Elastic Compute Cloud (EC2)&lt;/li&gt;
  &lt;li&gt;Setup your Domain&lt;/li&gt;
  &lt;li&gt;Generate TLS Certificates&lt;/li&gt;
  &lt;li&gt;Ansible Playbook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first task of purchasing a domain was completed during our class time. We were able to acquire GitLegion.dev as our official domain, not a bad address at $12 from google domains.&lt;/p&gt;

&lt;p&gt;The rest of the task have been divided up amongst our group. I was lucky enough to get assigned the ansible playbook. Which is cool because I was the first to complete the playbooks from the lab; so, this should be a piece of cake for me. I maybe speaking too soon though since I haven’t stared the coding yet.&lt;/p&gt;

&lt;p&gt;For the most part we are still in the early stages of the project and we expect to have it completed sometime next week. I will be posting again next week with a follow up on our progress. Thanks for reading!&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Prometheus</title><link href="http://localhost:4000/newblog/blog/2019/09/26/Prometheus-Node_Exporter.html" rel="alternate" type="text/html" title="Prometheus" /><published>2019-09-26T00:00:00-07:00</published><updated>2019-09-26T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/09/26/Prometheus-Node_Exporter</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/09/26/Prometheus-Node_Exporter.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;Welcome back for another weekly edition of CIT 480 Blog.&lt;/p&gt;

&lt;p&gt;I wanted to start off with a recap/update on last week’s Lab 2. After some troubleshooting and research, I was finally able to complete the Ansible playbooks that I was working on. I have to admit that it was a challenging lab to me, but I am grateful with the outcome and especially with the amount of knowledge I gained.&lt;/p&gt;

&lt;p&gt;Moving forward, this week’s lab involved working with Prometheus, another piece of software unknown to me. As always, I began with a little bit of research on Prometheus, so that I could understand what exactly I am working on. Prometheus is an open source system monitoring and alerting software tool. The lab involved creating a new docker container and installing Prometheus on it as well as node_explorer.&lt;/p&gt;

&lt;p&gt;The process went smooth for the most from beginning to end. Once the docker container is fired up I installed updates as well as wget and Prometheus. I ended up learning about the tar command which was a good thing. Once I verified that Prometheus was up and running through my browser, I took the required screenshot and I was done.&lt;/p&gt;

&lt;p&gt;The second process involved installing node_exporter and using Prometheus to bring up CPU metrics on the local container. Node_exporter is an add on to Prometheus that gives the ability to track node metrics like CPU usage and such.&lt;/p&gt;

&lt;p&gt;I ended up creating a new container for this section and installing Prometheus all over again. Then I installed node_exporter which was as well a smooth install. Once installed and started node_exporter goes to work. I brought up a browser window and connected to Prometheus then I brought up the cpu metric graph took a screenshot. That was it the lab had been completed and I done.&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry><entry><title type="html">Working with Ansible</title><link href="http://localhost:4000/newblog/blog/2019/09/20/Working-With-Ansible.html" rel="alternate" type="text/html" title="Working with Ansible" /><published>2019-09-20T00:00:00-07:00</published><updated>2019-09-20T00:00:00-07:00</updated><id>http://localhost:4000/newblog/blog/2019/09/20/Working-With-Ansible</id><content type="html" xml:base="http://localhost:4000/newblog/blog/2019/09/20/Working-With-Ansible.html">&lt;p&gt;Hi Everyone,&lt;/p&gt;

&lt;p&gt;Welcome back for another weekly edition of CIT 480 Blog.&lt;/p&gt;

&lt;p&gt;This week I was tasked with creating two Ansible playbook files. The first playbook was required to install traceroute, create two new groups, create users for each group, and lastly set permission for both groups. The second playbook was required to install a LAMP environment, the affinity, and composer. Being that I had never heard of Ansible I knew I was in for a good learning experience.&lt;/p&gt;

&lt;p&gt;Like with all projects I began with a simple google search. Next thing you know I have about fifteen tabs open on my web browser with no idea, in hell, on what to exactly do. After a few minutes of back and forth between webpage tutorials and youtube videos I started to understand what exactly an Ansible playbook is all about. It is a simple, yet complex, file written in YML that can be used to configure multiple systems with a simple command and a press of the enter key.&lt;/p&gt;

&lt;p&gt;Now that I was aware about what exactly an Ansible playbook the next question was, “What’s the structure and the syntax?”. Once again, I found myself overloading on the numerous amounts of tutorials and videos that were available online. Eventually stumbling on a webpage where I began to understand the process and structure. Ansible files are easy to structure once you start to understand how commands are written out (sample command below).&lt;/p&gt;

&lt;p&gt;At the top of the file you start by specifying the target hosts and then right underneath you start to list the task you want to complete. Ansible playbooks use what are called modules to specify the commands that the playbooks should run. You would normally run an apache install by typing out, “apt-get install apache2”. In Ansible the apt-get command, and any other command you can think of, has a corresponding module. For apt-get that module is apt.&lt;/p&gt;

&lt;p&gt;For most modules the module (command) type is superseded by a name field which is more of a comment that explains what that portion of the task with do as seen above I gave the task a name of “Install Apache2”. Second you specify the module (command) that you want to call in my case the “apt” module is the ansible equivalent of “apt-get”. Below that the name of the software package to be installed should be specified, in my example I specified “apache2”. Then the state is set to latest for the latest version.&lt;/p&gt;

&lt;p&gt;For the apt module you have to specify that you want to run a apt-get so you set the force_apt_get to yes. Lastly, I set the cache to be updated. Below is the sample:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hosts: localhost&lt;/li&gt;
  &lt;li&gt;remote_user: root&lt;/li&gt;
  &lt;li&gt;tasks:
  	- name: install apache2
    &lt;ul&gt;
      &lt;li&gt;apt:
        &lt;ul&gt;
          &lt;li&gt;name: apache2&lt;/li&gt;
          &lt;li&gt;state: latest&lt;/li&gt;
          &lt;li&gt;force_apt_get: yes&lt;/li&gt;
          &lt;li&gt;update_cache: yes&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately, having to work on an Ansible playbook was not a daunting as I originally thought it would be. Yes, there is a new syntax that need to be learned but that’s nothing when you think about the knowledge that is gained in the process.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;P.S. Since submitting this blog I have yet to finish the playbooks. I will give an update on next weeks blog. Stay tuned!&lt;/p&gt;</content><author><name>Juan Delgado</name></author><summary type="html">Hi Everyone,</summary></entry></feed>